package ie.setu.domain.repository

import domain.Activity
import domain.db.Activities
import ie.setu.domain.MedicationLog
import ie.setu.domain.db.MedicationLogs
import org.jetbrains.exposed.sql.SqlExpressionBuilder.eq
import org.jetbrains.exposed.sql.deleteWhere
import org.jetbrains.exposed.sql.insert
import org.jetbrains.exposed.sql.selectAll
import org.jetbrains.exposed.sql.transactions.transaction
import org.jetbrains.exposed.sql.update
import utils.mapToMedicationLog

class MedicationLogDAO {
    //Get all the logs in the database regardless of user id
    fun getAll(): ArrayList<MedicationLog> {
        val medicationLogsList: ArrayList<MedicationLog> = arrayListOf()
        transaction {
            MedicationLogs.selectAll().map {
                    medicationLogsList.add(mapToMedicationLog(it)) }
        }
        return medicationLogsList
    }

    //Find a specific log by log id
    fun findByMedicationLogId(id: Int): MedicationLog?{
        return transaction {
            MedicationLogs
                .selectAll().where { MedicationLogs.id eq id }
                .map{ mapToMedicationLog(it) }
                .firstOrNull()
        }
    }


    //Find all log for a specific user id
    fun findByUserId(userId: Int): List<MedicationLog>{
        return transaction {
            MedicationLogs
                .selectAll().where {MedicationLogs.userId eq userId}
                .map { mapToMedicationLog(it) }
        }
    }

    //Save a log to the database
    fun save(medicationLog: MedicationLog): Int {
        return transaction {
            val medicationLogId = MedicationLogs.insert {
                it[medicationName] = medicationLog.medicationName
                it[dosage] = medicationLog.dosage
                it[frequency] = medicationLog.frequency
                it[started] = medicationLog.started
                it[ended] = medicationLog.ended
                it[notes] = medicationLog.notes
                it[userId] = medicationLog.userId
            } get MedicationLogs.id
            //returns the activity id as generated by the table
            medicationLogId
        }
    }

    // Deletes a specific log by its og ID
    fun deleteByMedicationLogId(medicationLogId: Int): Int{
        return transaction {
            MedicationLogs.deleteWhere {MedicationLogs.id eq medicationLogId }
        }
    }

    // Deletes all logs associated with a specific user ID
    fun deleteMedicationLogsByUserId(userId: Int): Int{
        return transaction {
            MedicationLogs.deleteWhere { MedicationLogs.userId eq userId }
        }
    }

    // Updates an existing log by its og ID
    fun updateSpecificMedicationLogById(medicationLogId: Int, medicationLogToUpdate: MedicationLog): Int{
        return transaction {
            MedicationLogs.update ({
                MedicationLogs.id eq medicationLogId}) {
                it[medicationName] = medicationLogToUpdate.medicationName
                it[dosage] = medicationLogToUpdate.dosage
                it[frequency] = medicationLogToUpdate.frequency
                it[started] = medicationLogToUpdate.started
                it[ended] = medicationLogToUpdate.ended
                it[notes] = medicationLogToUpdate.notes
                it[userId] = medicationLogToUpdate.userId
            }
        }
    }
}