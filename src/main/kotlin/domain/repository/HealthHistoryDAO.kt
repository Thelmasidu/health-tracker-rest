package ie.setu.domain.repository


import ie.setu.domain.HealthHistory
import ie.setu.domain.db.HealthHistories
import org.jetbrains.exposed.sql.SqlExpressionBuilder.eq
import org.jetbrains.exposed.sql.deleteWhere
import org.jetbrains.exposed.sql.insert
import org.jetbrains.exposed.sql.selectAll
import org.jetbrains.exposed.sql.transactions.transaction
import org.jetbrains.exposed.sql.update
import utils.mapToHealthHistory


class HealthHistoryDAO {
    fun getAll(): ArrayList<HealthHistory> {
        val healthHistoriesList: ArrayList<HealthHistory> = arrayListOf()
        transaction {
            HealthHistories.selectAll().map {
                healthHistoriesList.add(mapToHealthHistory(it))
            }
        }
        return healthHistoriesList
    }

    //Find a specific HealthHistory by HealthHistory id
    fun findByHealthHistoryId(id: Int): HealthHistory?{
        return transaction {
            HealthHistories
                .selectAll().where { HealthHistories.id eq id }
                .map{ mapToHealthHistory(it) }
                .firstOrNull()
        }
    }

    //Find all HealthHistory for a specific user id
    fun findByUserId(userId: Int): List<HealthHistory>{
        return transaction {
            HealthHistories
                .selectAll().where {HealthHistories.userId eq userId}
                .map { mapToHealthHistory(it) }
        }
    }

    //Save a health history  to the database
    fun save(healthHistory: HealthHistory): Int {
        return transaction {
            val healthHistoryId = HealthHistories.insert {
                it[heartRate] = healthHistory.heartRate
                it[cholesterolLevels] = healthHistory.cholesterolLevels
                it[bloodSugarLevels] = healthHistory.bloodSugarLevels
                it[weight] = healthHistory.weight
                it[height] = healthHistory.height
                it[dateOfRecord] = healthHistory.dateOfRecord
                it[userId] = healthHistory.userId
                it[bloodPressure] = healthHistory.bloodPressure
            } get HealthHistories.id
            //returns the activity id as generated by the table
            healthHistoryId
        }
    }
    // Deletes a specific activity by its activity ID
    fun deleteByHealthHistoryId(healthHistoryId: Int): Int{
        return transaction {
            HealthHistories.deleteWhere { HealthHistories.id eq healthHistoryId }
        }
    }

    // Deletes all activities associated with a specific user ID
    fun deleteHealthHistoryByUserId(userId: Int): Int{
        return transaction {
            HealthHistories.deleteWhere { HealthHistories.userId eq userId }
        }
    }

    // Updates an existing health history by its ID
    fun updateSpecificHealthHistoryById(healthHistoryId: Int, healthHistoryToUpdate: HealthHistory): Int {
        return transaction {
            HealthHistories.update({ HealthHistories.id eq healthHistoryId }) {
                it[heartRate] = healthHistoryToUpdate.heartRate
                it[cholesterolLevels] = healthHistoryToUpdate.cholesterolLevels
                it[bloodSugarLevels] = healthHistoryToUpdate.bloodSugarLevels
                it[weight] = healthHistoryToUpdate.weight
                it[height] = healthHistoryToUpdate.height
                it[dateOfRecord] = healthHistoryToUpdate.dateOfRecord
                it[userId] = healthHistoryToUpdate.userId
                it[bloodPressure] = healthHistoryToUpdate.bloodPressure
            }
        }
    }
}